clc
%Initialize "constraint"
constraint = zeros(3,5);

%Define "A"
% A = [1.000000000000000                 0                  0   0.000081380208729  -0.000000000000009  0.000081380208730;
% %     1.000000000000000  -0.015624999999972  0.009021097956127   0.000244140624999  -0.000140954655564  0.000081380208334;
% %     1.000000000000000  -0.015624999999972 -0.009021097956124   0.000244140624999  0.000140954655564   0.000081380208334;
%    1.000000000000000  -0.031249999999941                  0   0.001057942708725  0                   0.000081380208729;
%    1.000000000000000                   0 -0.031250000000127   0.000081380208729  0.000000000000009   0.001057942708738;
%    1.000000000000000   0.031249999999941 -0.000000000000003   0.001057942708714  -0.000000000000015  0.000081380208730;
%    1.000000000000000   0.031249999999950  0.031250000000118   0.001057942708715  0.000976562499982   0.001057942708727;
%    1.000000000000000   0.000000000000002  0.031250000000127   0.000081380208729  -0.000000000000015  0.001057942708727];

A = [1                0                   0;
     1 -0.000000000000149  -0.125000000000367;
     1  0.124999999999802  -0.000000000000149;
     1  0.000000000000149   0.125000000000355;
     1 -0.124999999999858   0.000000000000149];


 
 
 
% A = [-0.031249999999941                  0   (0.001057942708725 - 0.000081380208729)  0                   (0.000081380208729 - 0.000081380208730);
%                       0 -0.031250000000127   (0.000081380208729 - 0.000081380208729)  0.000000000000009   (0.001057942708738 - 0.000081380208730);
%       0.031249999999941 -0.000000000000003   (0.001057942708714 - 0.000081380208729)  -0.000000000000015  (0.000081380208730 - 0.000081380208730);
%       0.031249999999950  0.031250000000118   (0.001057942708715 - 0.000081380208729)  0.000976562499982   (0.001057942708727 - 0.000081380208730);
%       0.000000000000002  0.031250000000127   (0.000081380208729 - 0.000081380208729)  -0.000000000000015  (0.001057942708727 - 0.000081380208730)];
  
  
  
  
  %Define "b"

  b = [0.006835937500054;   0.0009765625;   0.011393229166666664;  0.0185546875; 0.002278645833333333];
  
%  b = [-0.005859375000047;   0.004557291666691;   0.011718750000119;  -0.004557291666699];

% b = [1; 0; 0; 0; 0];
%b = [0.000325521 - 0.000325521;  0.000325521 - 0.000325521; 0.00227865 - 0.000325521; 0.00227865 - 0.000325521; 0.000325521 - 0.000325521];

% %Define "A"
% A = [1.000000000000000                 0                  0   0.000081380208729  -0.000000000000009  0.000081380208730;
%    1.000000000000000  -0.015624999999972  0.009021097956127   0.000244140624999  -0.000140954655564  0.000081380208334;
%    1.000000000000000  -0.015624999999972 -0.009021097956124   0.000244140624999  0.000140954655564   0.000081380208334;
%    1.000000000000000                   0 -0.031250000000127   0.000081380208729  0.000000000000009   0.001057942708738;
%    1.000000000000000   0.031249999999941 -0.000000000000003   0.001057942708714  -0.000000000000015  0.000081380208730;
%    1.000000000000000   0.031249999999950  0.031250000000118   0.001057942708715  0.000976562499982   0.001057942708727;
%    1.000000000000000   0.000000000000002  0.031250000000127   0.000081380208729  -0.000000000000015  0.001057942708727];
% 
% %Define "b"
% b = [0; 1; 1; 0; 0; 0; 0];
% 
% 
% bc1 = [1.000000000000000  -0.015624999999972   0.009021097956127   0.000244140624999  -0.000140954655564   0.000081380208334];
% bc2 = [1.000000000000000  -0.015624999999972  -0.009021097956124   0.000244140624999  0.000140954655564   0.000081380208334];

% constraint(1,:) = A(1,2:6);
% 
% 
% %Get amount of row and column in matrix "A"
% [row,column] = size(A);
% Amod = zeros(row - 1,column - 1);
% bmod = zeros(length(b) - 1,1);
% %It applies Gauss elimination on the first column of the matrix "Ain"
% for i = 2:row
%     %Define the ratio "R"
%     if abs(A(i,1)) > 1e-12
%         R = A(i,1)/A(i - 1,1);
%         %Attribute the value pivoted to the matrix "A".
%         Amod(i - 1,1:column - 1) = A(i,2:column) - R.*(A(i - 1,2:column));
%         bmod(i - 1) = b(i) - R*b(i - 1);
%     else
%         Amod(i - 1,1:column - 1) = A(i,2:column);
%         bmod(i - 1) = b(i);
%     end
% end  %End of FOR
% 
% A = Amod;
% b = bmod;
%  
% constraint(2,2:5) = A(1,2:5);
% bconst1 = b(1);
% 
% %Get amount of row and column in matrix "A"
% [row,column] = size(A);
% Amod = zeros(row - 1,column - 1);
% bmod = zeros(length(b) - 1,1);
% %It applies Gauss elimination on the first column of the matrix "Ain"
% for i = 2:row
%     %Define the ratio "R"
%     if abs(A(i,1)) > 1e-12
%         R = A(i,1)/A(i - 1,1);
%         %Attribute the value pivoted to the matrix "A".
%         Amod(i - 1,1:column - 1) = A(i,2:column) - R.*(A(i - 1,2:column));
%         bmod(i - 1) = b(i) - R*b(i - 1);
%     else
%         Amod(i - 1,1:column - 1) = A(i,2:column);
%         bmod(i - 1) = b(i);
%     end
% end  %End of FOR
% 
% A = Amod
% b = bmod

%Get amount of row and column in matrix "A"
[row,column] = size(A);
%Initialize "Q" and "R"
Q = zeros(row,column);
R = zeros(column);

%Gram-Schmidt Algorithm (Fill "Q" and "R")
for j = 1:column
    v = A(:,j);
    for i = 1:j - 1
        R(i,j) = Q(:,i)'*A(:,j);
        v = v - R(i,j)*Q(:,i);
    end  %End of FOR
    R(j,j) = norm(v);
    Q(:,j) = v/R(j,j);
end  %End of FOR
    
%Calculate the weights ("w")
gs = R\Q';

x = gs*b

%a = bc1*x
%xmod = 0 - constraint(1,:)*x  
   
   
  
   
  